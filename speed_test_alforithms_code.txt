#include "stdafx.h"
#include "SelectionSort.h"
#include <iostream>

using namespace std;

//================================================================

void SelectionSort::selection_sort(void) {
	int out, in, max;

	for (out = nElems-1; out > - 1; out--) {
		max = out;

		for (in = out - 1; in > -1; in--) {
			if (data[in] > data[max]) {
				max = in;
			}
		}
		swap(out, max); 
	}
}

//================================================================

void SelectionSort::display_data(void) {
	for (size_t i = 0; i < nElems; i++) {
		cout << data[i] << " ";
	}
	cout << endl;
}

void SelectionSort::swap(int a, int b) {
	int tmp = data[a];
	data[a] = data[b];
	data[b] = tmp;
}

#include "stdafx.h"
#include "NAW.h"

string NAW::get_naam(void) { return naam; }

string NAW::get_adres(void) { return adres; }

string NAW::get_woonplaats(void) { return woonplaats; }

void NAW::set_naam(string naam) { this->naam = naam; }

void NAW::set_adres(string adres) { this->adres = adres; }

void NAW::set_woonplaats(string woonplaats) { this->woonplaats = woonplaats; }

/**
* naam is te controleren naam van een NAW object
*
* return
* true: als parameter naam gelijk is aan de naam van object
* false: in alle andere gevallen
*
*/
bool NAW::heeft_naam(string naam) {
	return (this->naam == naam);
}

/**
* adres is te controleren adres van een NAW object
*
* return
* true: als parameter adres gelijk is aan de adres van object
* false: in alle andere gevallen
*
*/
bool NAW::heeft_adres(string adres) {
	return (this->adres == adres);
}

/**
* woonplaats is te controleren woonplaats van een NAW object
*
* return
* true: als parameter woonplaats gelijk is aan de woonplaats van object
* false: in alle andere gevallen
*
*/
bool NAW::heeft_woonplaats(string woonplaats) {
	return (this->woonplaats == woonplaats);
}

int NAW::compare_to(NAW naw) {
	int compareWoonplaats = woonplaats.compare(naw.woonplaats);
	int compareNaam = naam.compare(naw.naam);
	int compareAdres = adres.compare(naw.adres);

	if (compareWoonplaats == 0) {
		if (compareNaam == 0) {
			return compareAdres;
		}
	}
	return -1;
}

#include "stdafx.h"
#include "Link.h"
#include <iostream>

using namespace std;

// - read page 186
// - read page 188
// - read page 189
// - read page 194
// - read page 198 - 200
// - read page 215 - 217
// - read page 221 - 231
// - read chapter 5 completely

#include "stdafx.h"
#include "InsertionSort.h"
#include <iostream>

using namespace std;

//================================================================

void InsertionSort::insertion_sort(int initIndex) {
	int in, out;

	for (out = initIndex; out< nElems; out++) {
		long temp = rij[out];
		in = out;
		
		while ((in > 0) && (rij[in - 1] >= temp)) {
			rij[in] = rij[in - 1]; 
			--in;
		}
		rij[in] = temp;
	}
}

//================================================================

void InsertionSort::display_data(void) {
	for (size_t i = 0; i < nElems; i++) {
		cout << rij[i] << " ";
	}
	cout << endl;
}

void InsertionSort::swap(int a, int b) {
	int tmp = rij[a];
	rij[a] = rij[b];
	rij[b] = tmp;
}

#include "stdafx.h"
#include <iostream>
//#include "BubbleSort.h"
//#include "BubbleSortNaw.h"
// #include "SelectionSort.h"
#include "InsertionSort.h"

using namespace std;

int main() {

	// const int nElems = 10;
	// int data[nElems] = { 7, 3, 8, 1, 2, 5, 4, 6, 9, 0 };

	// - write a selection sort algorithm
	// SelectionSort sSort;
	// sSort.selection_sort();
	// sSort.display_data();
		
	InsertionSort iSort;
	iSort.insertion_sort(4);
	iSort.display_data();

	cin.get();
	return 0;
}


/*
int main() {

	NAW naw1;
	NAW naw2;
	NAW naw3;
	NAW naw4;
	NAW naw5;
	NAW naw6;

	const int nElems = 6;

	NAW testData[nElems] = {naw1, naw2, naw3, naw4, naw5, naw6};

	testData[0].set_naam("Rick");
	testData[1].set_naam("Chris");
	testData[2].set_naam("Laura");
	testData[3].set_naam("David");
	testData[4].set_naam("Heleen");
	testData[5].set_naam("Alvin");

	testData[0].set_woonplaats("Den Bosch");
	testData[1].set_woonplaats("Den Bosch");
	testData[2].set_woonplaats("Aruba");
	testData[3].set_woonplaats("Columbia");
	testData[4].set_woonplaats("Aruba");
	testData[5].set_woonplaats("Aruba");

	// - Sort the NAW - algorithm
	BubbleSortNaw bList(nElems, testData);

	// sort by woonplaats
	bList.sort_by_woonplaats();
	cout << "Na het sorteren van woonplaats" << endl;
	cout << "======================================" << endl;
	bList.display_list();
	cout << endl;


	// sort by naam
	bList.sort_by_naam();
	cout << "Na het sorteren van naam" << endl;
	cout << "======================================" << endl;
	bList.display_list();	
	cout << endl;

	// sort by woonplaats
	bList.sort_by_woonplaats();
	cout << "Na het sorteren van woonplaats" << endl;
	cout << "======================================" << endl;
	bList.display_list();
	cout << endl;


	cin.get();
    return 0;
}*/

/*===============================================================
* Class for sorting NAW objects
*===============================================================
*	@author		Rick Kock
*	@version	1
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
*/

#include "stdafx.h"
#include "BubbleSortNaw.h"

BubbleSortNaw::BubbleSortNaw(int nElems, NAW nawList[]) : nElems(nElems) {
	for (size_t i = 0; i < nElems; i++) {
		this->nawList[i] = nawList[i];
	}
}

//================================================================

/**
* Uses bubble sort: sort data array by going through the array
* and checks if the next integer is bigger than the current integer
* value. If the next integer is smaller, the values should be swapped.
*/
void BubbleSortNaw::sort(void) {
	for (int i = nElems; i > -1; i--) {
		sort_first_elem();
	}
}

/**
* Sorts the elements in pairs only one time.
*/
void BubbleSortNaw::sort_first_elem(void) {
	//int i = nElems - 1;

	//while (i > -1) {

	//	// check to see if not beyond beginning of array
	//	if ((i - 1) > -1) {
	//		if (nawList[i]nawList[i - 1]) {
	//			swap(i, i - 1);
	//		}
	//	}
	//	i--;
	//}

	
}

//================================================================

void BubbleSortNaw::sort_by_naam(void) {
	int outer, inner;
	NAW tmp;

	for (outer = nElems - 1; outer > -1; outer--) {
		for (inner = 0; inner < outer; inner++) {
			string firstLetterInner = nawList[inner].get_naam().substr(0, 1);
			string firstLetterNext = nawList[inner + 1].get_naam().substr(0, 1);

			if (firstLetterInner.compare(firstLetterNext) >= 0) {
				tmp = nawList[inner + 1];
				nawList[inner + 1] = nawList[inner];
				nawList[inner] = tmp;
			}
		}
	}
}

void BubbleSortNaw::sort_by_woonplaats(void) {
	int outer, inner;
	NAW tmp;

	for (outer = nElems - 1; outer > -1; outer--) {
		for (inner = 0; inner < outer; inner++) {
			string firstLetterInner = nawList[inner].get_woonplaats().substr(0, 1);
			string firstLetterNext = nawList[inner + 1].get_woonplaats().substr(0, 1);

			if (firstLetterInner.compare(firstLetterNext) >= 0) {
				tmp = nawList[inner + 1];
				nawList[inner + 1] = nawList[inner];
				nawList[inner] = tmp;
			}
		}
	}
}

//================================================================

/**
* Swaps two values in the data array.
*
* @param a	value in data array to be swapped with the value in b parameter
* @param b	value in data array to be swapped with the value in a parameter
*/
void BubbleSortNaw::swap(int a, int b) {
	NAW tmp = nawList[a];
	nawList[a] = nawList[b];
	nawList[b] = tmp;
}

void BubbleSortNaw::display_list(void) {
	for (int i = 0; i < nElems; i++) {
		cout << "Naam:\t" << nawList[i].get_naam() << '\t';
		cout << "Woonplaats:\t" << nawList[i].get_woonplaats() << endl;
	}
}

/*===============================================================
 * Class to sort integers
 *===============================================================
 *	@author		Rick Kock
 *	@version	1
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#include "stdafx.h"
#include "BubbleSort.h"
#include <iostream>

using namespace std;

//================================================================

BubbleSort::BubbleSort(int nElems, int data[]) : nElems(nElems) {
	for (size_t i = 0; i < nElems; i++) {
		this->data[i] = data[i];
	}
}

//================================================================

/**
* Uses bubble sort: sort data array by going through the array
* and checks if the next integer is bigger than the current integer
* value. If the next integer is smaller, the values should be swapped.
*/
void BubbleSort::sort(void) {
	for (int i = nElems; i > -1; i--) {	
		sort_first_elem();
	}
}

/**
* Sorts the elements in pairs only one time. 
*/
void BubbleSort::sort_first_elem(void) {
	int i = nElems-1;

	while (i > -1) {

		// check to see if not beyond beginning of array
		if ((i - 1) > -1) { 
			if (data[i] <= data[i - 1]) {
				swap(i, i - 1);
			}
		}
		i--;
	}
}

/**
 * Swaps two values in the data array.
 *
 * @param a	value in data array to be swapped with the value in b parameter
 * @param b	value in data array to be swapped with the value in a parameter
 */
void BubbleSort::swap(int a, int b) {
	int tmp = data[a];
	data[a] = data[b];
	data[b] = tmp;
}

//================================================================

void BubbleSort::print_data(void) {
	for (size_t i = 0; i < nElems; i++) {
		cout << '\t' << i << " :\t" << data[i] << endl;
	}
}

#pragma once

class SelectionSort {
public:
	void selection_sort(void);
	void display_data(void);

private:
	static const int nElems = 10;
	// int *data = new int[nElems];
	int data[nElems] = { 7, 3, 8, 1, 2, 5, 4, 6, 9, 0 };
	void swap(int a, int b);
};

#pragma once
#include <iostream>
#include <string>

using namespace std;

class NAW {
private:
	string naam;
	string adres;
	string woonplaats;

public:
	string get_naam(void);
	string get_adres(void);
	string get_woonplaats(void);

	void set_naam(string naam);
	void set_adres(string adres);
	void set_woonplaats(string woonplaats);

	bool heeft_naam(string naam);
	bool heeft_adres(string adres);
	bool heeft_woonplaats(string woonplaats);

	int compare_to(NAW naw);
};

#pragma once

class Link {
public:
private:
};

#pragma once

class InsertionSort {
public:
	void insertion_sort(int initIndex);
	void display_data(void);

private:
	static const int nElems = 10;
	// int *data = new int[nElems];
	int rij[nElems] = { 7, 3, 8, 1, 2, 5, 4, 6, 9, 0 };
	void swap(int a, int b);
};

#pragma once
#include "Naw.h"

class BubbleSortNaw {
public:
	BubbleSortNaw(int nElems, NAW nawList[]);
	void sort(void);
	void display_list(void);
	void sort_first_elem(void);
	void sort_by_naam(void);
	void sort_by_woonplaats(void);

private:
	int nElems = 1;
	NAW *nawList = new NAW[nElems];
	void swap(int a, int b);
};

#pragma once

class BubbleSort {
public:
	BubbleSort(int nElems, int data[]);
	void sort(void);
	void print_data(void);
	void sort_first_elem(void);

private:
	int nElems = 1;
	int *data = new int[nElems];
	void swap(int a, int b);
};

/*
 * File:   main.c
 * Author: Rick
 *
 * Created on May 10, 2017, 1:32 AM
 */

#pragma config RETEN = ON       // VREG Sleep Enable bit (Enabled)
#pragma config INTOSCSEL = HIGH // LF-INTOSC Low-power Enable bit (LF-INTOSC in High-power mode during Sleep)
#pragma config SOSCSEL = HIGH   // SOSC Power Selection and mode Configuration bits (High Power SOSC circuit selected)
#pragma config XINST = OFF      // Extended Instruction Set (Disabled)

// CONFIG1H
#pragma config FOSC = INTIO2    // Oscillator (Internal RC oscillator)
#pragma config PLLCFG = OFF     // PLL x4 Enable bit (Disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor (Disabled)
#pragma config IESO = OFF       // Internal External Oscillator Switch Over Mode (Disabled)

// CONFIG2L
#pragma config PWRTEN = OFF     // Power Up Timer (Disabled)
#pragma config BOREN = SBORDIS  // Brown Out Detect (Enabled in hardware, SBOREN disabled)
#pragma config BORV = 3         // Brown-out Reset Voltage bits (1.8V)
#pragma config BORPWR = ZPBORMV // BORMV Power level (ZPBORMV instead of BORMV is selected)

// CONFIG2H
#pragma config WDTEN = SWDTDIS  // Watchdog Timer (WDT enabled in hardware; SWDTEN bit disabled)
#pragma config WDTPS = 1048576  // Watchdog Postscaler (1:1048576)

// CONFIG3L
#pragma config RTCOSC = SOSCREF // RTCC Clock Select (RTCC uses SOSC)

// CONFIG3H
#pragma config CCP2MX = PORTC   // CCP2 Mux (RC1)
#pragma config ECCPMX = PORTE   // ECCP Mux (Enhanced CCP1/3 [P1B/P1C/P3B/P3C] muxed with RE6/RE5/RE4/RE3)
#pragma config MSSPMSK = MSK7   // MSSP address masking (7 Bit address masking mode)
#pragma config MCLRE = ON       // Master Clear Enable (MCLR Enabled, RG5 Disabled)

// CONFIG4L
#pragma config STVREN = ON      // Stack Overflow Reset (Enabled)
#pragma config BBSIZ = BB2K     // Boot Block Size (2K word Boot Block size)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protect 00800-03FFF (Disabled)
#pragma config CP1 = OFF        // Code Protect 04000-07FFF (Disabled)
#pragma config CP2 = OFF        // Code Protect 08000-0BFFF (Disabled)
#pragma config CP3 = OFF        // Code Protect 0C000-0FFFF (Disabled)
#pragma config CP4 = OFF        // Code Protect 10000-13FFF (Disabled)
#pragma config CP5 = OFF        // Code Protect 14000-17FFF (Disabled)
#pragma config CP6 = OFF        // Code Protect 18000-1BFFF (Disabled)
#pragma config CP7 = OFF        // Code Protect 1C000-1FFFF (Disabled)

// CONFIG5H
#pragma config CPB = OFF        // Code Protect Boot (Disabled)
#pragma config CPD = OFF        // Data EE Read Protect (Disabled)

// CONFIG6L
#pragma config WRT0 = OFF       // Table Write Protect 00800-03FFF (Disabled)
#pragma config WRT1 = OFF       // Table Write Protect 04000-07FFF (Disabled)
#pragma config WRT2 = OFF       // Table Write Protect 08000-0BFFF (Disabled)
#pragma config WRT3 = OFF       // Table Write Protect 0C000-0FFFF (Disabled)
#pragma config WRT4 = OFF       // Table Write Protect 10000-13FFF (Disabled)
#pragma config WRT5 = OFF       // Table Write Protect 14000-17FFF (Disabled)
#pragma config WRT6 = OFF       // Table Write Protect 18000-1BFFF (Disabled)
#pragma config WRT7 = OFF       // Table Write Protect 1C000-1FFFF (Disabled)

// CONFIG6H
#pragma config WRTC = OFF       // Config. Write Protect (Disabled)
#pragma config WRTB = OFF       // Table Write Protect Boot (Disabled)
#pragma config WRTD = OFF       // Data EE Write Protect (Disabled)

// CONFIG7L
#pragma config EBRT0 = OFF      // Table Read Protect 00800-03FFF (Disabled)
#pragma config EBRT1 = OFF      // Table Read Protect 04000-07FFF (Disabled)
#pragma config EBRT2 = OFF      // Table Read Protect 08000-0BFFF (Disabled)
#pragma config EBRT3 = OFF      // Table Read Protect 0C000-0FFFF (Disabled)
#pragma config EBRT4 = OFF      // Table Read Protect 10000-13FFF (Disabled)
#pragma config EBRT5 = OFF      // Table Read Protect 14000-17FFF (Disabled)
#pragma config EBRT6 = OFF      // Table Read Protect 18000-1BFFF (Disabled)
#pragma config EBRT7 = OFF      // Table Read Protect 1C000-1FFFF (Disabled)

// CONFIG7H
#pragma config EBRTB = OFF      // Table Read Protect Boot (Disabled)

#include <xc.h>
#include <pic18f87k90.h>

#define _XTAL_FREQ 8000000
#define TMR2PRESCALE 4

//=================================================================
void led_init(void);
void timer0_init(void);
void enable_timer0(void);
void stop_timer0(void);
void configure_timer0_prescale_value(unsigned char prescaleValue);
void enable_timer0_interrupt(void);
void clear_timer0_interrupt(void);
//=================================================================

void main(void) {
    led_init();
    configure_timer0_prescale_value(0b000);
    timer0_init();
    enable_timer0_interrupt();
    enable_timer0();
    
    while (1) {
        // everything handled by ISR
    }
    return;
}

void interrupt ISR(void) {
    
    // interrupt fired by timer 0?
    if (INTCONbits.TMR0IF == 1) {
        // toggle led
        PORTAbits.RA0 ^= 1;
    }
    // reset overflow interrupt flag
    INTCONbits.TMR0IF = 0;
}

//=================================================================

void led_init(void) {
    // set a0 pin to output
    TRISAbits.TRISA0 = 0;
}

//=================================================================

void timer0_init(void) {
    
    // clear timer 0 high and low holding registers
    TMR0H = TMR0L = 0;
    
    // configure timer as 8-bit timer/counter
    T0CONbits.T08BIT = 1;   
    
    // use internal clock (Fosc/4)
    T0CONbits.T0CS = 0;     
    
    // timer 0 prescaler is assigned; 
    // timer value comes from prescaler output
    T0CONbits.PSA = 0;
}

void enable_timer0(void) {
    // enable timer 0
    T0CONbits.TMR0ON = 1;
}

void stop_timer0(void) {
    // enable timer 0
    T0CONbits.TMR0ON = 0;
}

void configure_timer0_prescale_value(unsigned char prescaleValue) {
    T0CONbits.T0PS = prescaleValue;
}

void enable_timer0_interrupt(void) {
    // enables global interrupts
    INTCONbits.GIE = 1;
    // enables interrupt
    INTCONbits.TMR0IE = 1;
}

void clear_timer0_interrupt(void) {
    // clears interrupt overflow flag
    INTCONbits.TMR0IF = 0;
}

//=================================================================

/*
 * File:   main.c
 * Author: Rick
 *
 * Created on May 10, 2017, 1:32 AM
 */

#pragma config RETEN = ON       // VREG Sleep Enable bit (Enabled)
#pragma config INTOSCSEL = HIGH // LF-INTOSC Low-power Enable bit (LF-INTOSC in High-power mode during Sleep)
#pragma config SOSCSEL = HIGH   // SOSC Power Selection and mode Configuration bits (High Power SOSC circuit selected)
#pragma config XINST = OFF      // Extended Instruction Set (Disabled)

// CONFIG1H
#pragma config FOSC = INTIO2    // Oscillator (Internal RC oscillator)
#pragma config PLLCFG = OFF     // PLL x4 Enable bit (Disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor (Disabled)
#pragma config IESO = OFF       // Internal External Oscillator Switch Over Mode (Disabled)

// CONFIG2L
#pragma config PWRTEN = OFF     // Power Up Timer (Disabled)
#pragma config BOREN = SBORDIS  // Brown Out Detect (Enabled in hardware, SBOREN disabled)
#pragma config BORV = 3         // Brown-out Reset Voltage bits (1.8V)
#pragma config BORPWR = ZPBORMV // BORMV Power level (ZPBORMV instead of BORMV is selected)

// CONFIG2H
#pragma config WDTEN = SWDTDIS  // Watchdog Timer (WDT enabled in hardware; SWDTEN bit disabled)
#pragma config WDTPS = 1048576  // Watchdog Postscaler (1:1048576)

// CONFIG3L
#pragma config RTCOSC = SOSCREF // RTCC Clock Select (RTCC uses SOSC)

// CONFIG3H
#pragma config CCP2MX = PORTC   // CCP2 Mux (RC1)
#pragma config ECCPMX = PORTE   // ECCP Mux (Enhanced CCP1/3 [P1B/P1C/P3B/P3C] muxed with RE6/RE5/RE4/RE3)
#pragma config MSSPMSK = MSK7   // MSSP address masking (7 Bit address masking mode)
#pragma config MCLRE = ON       // Master Clear Enable (MCLR Enabled, RG5 Disabled)

// CONFIG4L
#pragma config STVREN = ON      // Stack Overflow Reset (Enabled)
#pragma config BBSIZ = BB2K     // Boot Block Size (2K word Boot Block size)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protect 00800-03FFF (Disabled)
#pragma config CP1 = OFF        // Code Protect 04000-07FFF (Disabled)
#pragma config CP2 = OFF        // Code Protect 08000-0BFFF (Disabled)
#pragma config CP3 = OFF        // Code Protect 0C000-0FFFF (Disabled)
#pragma config CP4 = OFF        // Code Protect 10000-13FFF (Disabled)
#pragma config CP5 = OFF        // Code Protect 14000-17FFF (Disabled)
#pragma config CP6 = OFF        // Code Protect 18000-1BFFF (Disabled)
#pragma config CP7 = OFF        // Code Protect 1C000-1FFFF (Disabled)

// CONFIG5H
#pragma config CPB = OFF        // Code Protect Boot (Disabled)
#pragma config CPD = OFF        // Data EE Read Protect (Disabled)

// CONFIG6L
#pragma config WRT0 = OFF       // Table Write Protect 00800-03FFF (Disabled)
#pragma config WRT1 = OFF       // Table Write Protect 04000-07FFF (Disabled)
#pragma config WRT2 = OFF       // Table Write Protect 08000-0BFFF (Disabled)
#pragma config WRT3 = OFF       // Table Write Protect 0C000-0FFFF (Disabled)
#pragma config WRT4 = OFF       // Table Write Protect 10000-13FFF (Disabled)
#pragma config WRT5 = OFF       // Table Write Protect 14000-17FFF (Disabled)
#pragma config WRT6 = OFF       // Table Write Protect 18000-1BFFF (Disabled)
#pragma config WRT7 = OFF       // Table Write Protect 1C000-1FFFF (Disabled)

// CONFIG6H
#pragma config WRTC = OFF       // Config. Write Protect (Disabled)
#pragma config WRTB = OFF       // Table Write Protect Boot (Disabled)
#pragma config WRTD = OFF       // Data EE Write Protect (Disabled)

// CONFIG7L
#pragma config EBRT0 = OFF      // Table Read Protect 00800-03FFF (Disabled)
#pragma config EBRT1 = OFF      // Table Read Protect 04000-07FFF (Disabled)
#pragma config EBRT2 = OFF      // Table Read Protect 08000-0BFFF (Disabled)
#pragma config EBRT3 = OFF      // Table Read Protect 0C000-0FFFF (Disabled)
#pragma config EBRT4 = OFF      // Table Read Protect 10000-13FFF (Disabled)
#pragma config EBRT5 = OFF      // Table Read Protect 14000-17FFF (Disabled)
#pragma config EBRT6 = OFF      // Table Read Protect 18000-1BFFF (Disabled)
#pragma config EBRT7 = OFF      // Table Read Protect 1C000-1FFFF (Disabled)

// CONFIG7H
#pragma config EBRTB = OFF      // Table Read Protect Boot (Disabled)

#include <xc.h>

#define _XTAL_FREQ 8000000
#define TMR2PRESCALE 4

void pwm_init(void);
void pwm_set_duty_cycle(unsigned int duty);
void pwm_start(void);
void pwm_Stop(void);

void main(void) {
    unsigned int i=0,j=0;
    pwm_init();
    pwm_set_duty_cycle(50);
    TRISD = 0xFF;
    TRISB = 0;
    pwm_start();
    
    while (1) {
        if(RD0 == 0 && i<1000) {
            i=i+10;
        }
        if(RD1 == 0 && i>0) {
            i=i-10;
        }
        pwm_set_duty_cycle(i);
        _delay(50);
    }
    return;
}

void pwm_init(void) {
    DC1B1 = 0;      // Set the most least significant bits 
    DC1B0 = 0;      // ...
    CCP1M3 = 1;     // Set pwm mode (1100) pg.237
    CCP1M2 = 1;     // ...
    CCP1M1 = 0;     // ...
    CCP1M0 = 0;     // ...
}

void pwm_set_duty_cycle(unsigned int duty) {
    if(duty<1024) {
        duty = ((float)duty/1023); // * max duty cycle;         
        CCP1X = duty & 2;
        CCP1Y = duty & 1;
        CCPR1L = duty>>2;
    }
}

void pwm_start(void) {
  #if TMR2PRESCALAR == 1
    T2CKPS0 = 0;
    T2CKPS1 = 0;
  #elif TMR2PRESCALAR == 4
    T2CKPS0 = 1;
    T2CKPS1 = 0;
  #elif TMR2PRESCALAR == 16
    T2CKPS0 = 1;
    T2CKPS1 = 1;
  #endif
  TMR2ON = 1;
  TRISC2 = 0;
}

void pwm_Stop(void) {
  CCP1M3 = 0;
  CCP1M2 = 0;
}

/*
 * File:   main.c
 * Author: Rick
 *
 * Created on May 10, 2017, 1:32 AM
 */

#pragma config RETEN = ON       // VREG Sleep Enable bit (Enabled)
#pragma config INTOSCSEL = HIGH // LF-INTOSC Low-power Enable bit (LF-INTOSC in High-power mode during Sleep)
#pragma config SOSCSEL = HIGH   // SOSC Power Selection and mode Configuration bits (High Power SOSC circuit selected)
#pragma config XINST = OFF      // Extended Instruction Set (Disabled)

// CONFIG1H
#pragma config FOSC = INTIO2    // Oscillator (Internal RC oscillator)
#pragma config PLLCFG = OFF     // PLL x4 Enable bit (Disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor (Disabled)
#pragma config IESO = OFF       // Internal External Oscillator Switch Over Mode (Disabled)

// CONFIG2L
#pragma config PWRTEN = OFF     // Power Up Timer (Disabled)
#pragma config BOREN = SBORDIS  // Brown Out Detect (Enabled in hardware, SBOREN disabled)
#pragma config BORV = 3         // Brown-out Reset Voltage bits (1.8V)
#pragma config BORPWR = ZPBORMV // BORMV Power level (ZPBORMV instead of BORMV is selected)

// CONFIG2H
#pragma config WDTEN = SWDTDIS  // Watchdog Timer (WDT enabled in hardware; SWDTEN bit disabled)
#pragma config WDTPS = 1048576  // Watchdog Postscaler (1:1048576)

// CONFIG3L
#pragma config RTCOSC = SOSCREF // RTCC Clock Select (RTCC uses SOSC)

// CONFIG3H
#pragma config CCP2MX = PORTC   // CCP2 Mux (RC1)
#pragma config ECCPMX = PORTE   // ECCP Mux (Enhanced CCP1/3 [P1B/P1C/P3B/P3C] muxed with RE6/RE5/RE4/RE3)
#pragma config MSSPMSK = MSK7   // MSSP address masking (7 Bit address masking mode)
#pragma config MCLRE = ON       // Master Clear Enable (MCLR Enabled, RG5 Disabled)

// CONFIG4L
#pragma config STVREN = ON      // Stack Overflow Reset (Enabled)
#pragma config BBSIZ = BB2K     // Boot Block Size (2K word Boot Block size)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protect 00800-03FFF (Disabled)
#pragma config CP1 = OFF        // Code Protect 04000-07FFF (Disabled)
#pragma config CP2 = OFF        // Code Protect 08000-0BFFF (Disabled)
#pragma config CP3 = OFF        // Code Protect 0C000-0FFFF (Disabled)
#pragma config CP4 = OFF        // Code Protect 10000-13FFF (Disabled)
#pragma config CP5 = OFF        // Code Protect 14000-17FFF (Disabled)
#pragma config CP6 = OFF        // Code Protect 18000-1BFFF (Disabled)
#pragma config CP7 = OFF        // Code Protect 1C000-1FFFF (Disabled)

// CONFIG5H
#pragma config CPB = OFF        // Code Protect Boot (Disabled)
#pragma config CPD = OFF        // Data EE Read Protect (Disabled)

// CONFIG6L
#pragma config WRT0 = OFF       // Table Write Protect 00800-03FFF (Disabled)
#pragma config WRT1 = OFF       // Table Write Protect 04000-07FFF (Disabled)
#pragma config WRT2 = OFF       // Table Write Protect 08000-0BFFF (Disabled)
#pragma config WRT3 = OFF       // Table Write Protect 0C000-0FFFF (Disabled)
#pragma config WRT4 = OFF       // Table Write Protect 10000-13FFF (Disabled)
#pragma config WRT5 = OFF       // Table Write Protect 14000-17FFF (Disabled)
#pragma config WRT6 = OFF       // Table Write Protect 18000-1BFFF (Disabled)
#pragma config WRT7 = OFF       // Table Write Protect 1C000-1FFFF (Disabled)

// CONFIG6H
#pragma config WRTC = OFF       // Config. Write Protect (Disabled)
#pragma config WRTB = OFF       // Table Write Protect Boot (Disabled)
#pragma config WRTD = OFF       // Data EE Write Protect (Disabled)

// CONFIG7L
#pragma config EBRT0 = OFF      // Table Read Protect 00800-03FFF (Disabled)
#pragma config EBRT1 = OFF      // Table Read Protect 04000-07FFF (Disabled)
#pragma config EBRT2 = OFF      // Table Read Protect 08000-0BFFF (Disabled)
#pragma config EBRT3 = OFF      // Table Read Protect 0C000-0FFFF (Disabled)
#pragma config EBRT4 = OFF      // Table Read Protect 10000-13FFF (Disabled)
#pragma config EBRT5 = OFF      // Table Read Protect 14000-17FFF (Disabled)
#pragma config EBRT6 = OFF      // Table Read Protect 18000-1BFFF (Disabled)
#pragma config EBRT7 = OFF      // Table Read Protect 1C000-1FFFF (Disabled)

// CONFIG7H
#pragma config EBRTB = OFF      // Table Read Protect Boot (Disabled)

#include <xc.h>
#include <pic18f87k90.h>

#define _XTAL_FREQ 8000000
#define TMR2PRESCALE 4

//=================================================================
void led_init(void);
void timer0_init(void);
void enable_timer0(void);
void stop_timer0(void);
void configure_timer0_prescale_value(unsigned char prescaleValue);
void enable_timer0_interrupt(void);
void clear_timer0_interrupt(void);
//=================================================================

void main(void) {
    led_init();
    configure_timer0_prescale_value(0b000);
    timer0_init();
    enable_timer0_interrupt();
    enable_timer0();
    
    while (1) {
        // everything handled by ISR
    }
    return;
}

void interrupt ISR(void) {
    
    // interrupt fired by timer 0?
    if (INTCONbits.TMR0IF == 1) {
        // toggle led
        PORTAbits.RA0 ^= 1;
    }
    // reset overflow interrupt flag
    INTCONbits.TMR0IF = 0;
}

//=================================================================

void led_init(void) {
    // set a0 pin to output
    TRISAbits.TRISA0 = 0;
}

//=================================================================

void timer0_init(void) {
    
    // clear timer 0 high and low holding registers
    TMR0H = TMR0L = 0;
    
    // configure timer as 8-bit timer/counter
    T0CONbits.T08BIT = 1;   
    
    // use internal clock (Fosc/4)
    T0CONbits.T0CS = 0;     
    
    // timer 0 prescaler is assigned; 
    // timer value comes from prescaler output
    T0CONbits.PSA = 0;
}

void enable_timer0(void) {
    // enable timer 0
    T0CONbits.TMR0ON = 1;
}

void stop_timer0(void) {
    // enable timer 0
    T0CONbits.TMR0ON = 0;
}

void configure_timer0_prescale_value(unsigned char prescaleValue) {
    T0CONbits.T0PS = prescaleValue;
}

void enable_timer0_interrupt(void) {
    // enables global interrupts
    INTCONbits.GIE = 1;
    // enables interrupt
    INTCONbits.TMR0IE = 1;
}

void clear_timer0_interrupt(void) {
    // clears interrupt overflow flag
    INTCONbits.TMR0IF = 0;
}

//=================================================================